import { tap } from 'rxjs';
import { takeUntil } from 'rxjs/operators';
import { setupSubjectUnsubscribedChecker } from './checker';
import { DECORATOR_APPLIED, getSymbol, createSubjectOnTheInstance, completeSubjectOnTheInstance, } from './internals';
const NG_DEV_MODE = typeof ngDevMode === 'undefined' || ngDevMode;
function overrideNonDirectiveInstanceMethod(instance, destroyMethodName, symbol) {
    const originalDestroy = instance[destroyMethodName];
    if (NG_DEV_MODE && typeof originalDestroy !== 'function') {
        throw new Error(`${instance.constructor.name} is using untilDestroyed but doesn't implement ${destroyMethodName}`);
    }
    createSubjectOnTheInstance(instance, symbol);
    instance[destroyMethodName] = function () {
        // eslint-disable-next-line prefer-rest-params
        originalDestroy.apply(this, arguments);
        completeSubjectOnTheInstance(this, symbol);
        // We have to re-assign this property back to the original value.
        // If the `untilDestroyed` operator is called for the same instance
        // multiple times, then we will be able to get the original
        // method again and not the patched one.
        instance[destroyMethodName] = originalDestroy;
    };
}
export function untilDestroyed(instance, destroyMethodName) {
    return (source) => {
        const symbol = getSymbol(destroyMethodName);
        // If `destroyMethodName` is passed then the developer applies
        // this operator to something non-related to Angular DI system
        if (typeof destroyMethodName === 'string') {
            overrideNonDirectiveInstanceMethod(instance, destroyMethodName, symbol);
        }
        else {
            NG_DEV_MODE && ensureClassIsDecorated(instance);
            createSubjectOnTheInstance(instance, symbol);
        }
        const destroy$ = instance[symbol];
        NG_DEV_MODE && setupSubjectUnsubscribedChecker(instance, destroy$);
        const startTime = Date.now();
        let isEmpty = true;
        return source.pipe(takeUntil(destroy$), tap({
            next: () => {
                isEmpty = false;
            },
            complete: () => {
                if (isEmpty) {
                    const constructorPrototypeName = Reflect.getMetadata('__className__', instance.constructor.prototype);
                    const endTime = Date.now();
                    console.log(`Source observable is Empty. Constructor: ${constructorPrototypeName ?? instance.constructor.name}. Timespan: ${((endTime - startTime) / 1000).toFixed(2)}s`);
                }
            }
        }));
    };
}
function ensureClassIsDecorated(instance) {
    const prototype = Object.getPrototypeOf(instance);
    const missingDecorator = !(DECORATOR_APPLIED in prototype);
    if (missingDecorator) {
        throw new Error('untilDestroyed operator cannot be used inside directives or ' +
            'components or providers that are not decorated with UntilDestroy decorator');
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidW50aWwtZGVzdHJveWVkLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vbGlicy91bnRpbC1kZXN0cm95L3NyYy9saWIvdW50aWwtZGVzdHJveWVkLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBdUIsR0FBRyxFQUFFLE1BQU0sTUFBTSxDQUFDO0FBQ2hELE9BQU8sRUFBRSxTQUFTLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUUzQyxPQUFPLEVBQUUsK0JBQStCLEVBQUUsTUFBTSxXQUFXLENBQUM7QUFDNUQsT0FBTyxFQUNMLGlCQUFpQixFQUNqQixTQUFTLEVBQ1QsMEJBQTBCLEVBQzFCLDRCQUE0QixHQUM3QixNQUFNLGFBQWEsQ0FBQztBQU1yQixNQUFNLFdBQVcsR0FBRyxPQUFPLFNBQVMsS0FBSyxXQUFXLElBQUksU0FBUyxDQUFDO0FBRWxFLFNBQVMsa0NBQWtDLENBQ3pDLFFBQWEsRUFDYixpQkFBeUIsRUFDekIsTUFBYztJQUVkLE1BQU0sZUFBZSxHQUFHLFFBQVEsQ0FBQyxpQkFBaUIsQ0FBQyxDQUFDO0lBRXBELElBQUksV0FBVyxJQUFJLE9BQU8sZUFBZSxLQUFLLFVBQVUsRUFBRTtRQUN4RCxNQUFNLElBQUksS0FBSyxDQUNiLEdBQUcsUUFBUSxDQUFDLFdBQVcsQ0FBQyxJQUFJLGtEQUFrRCxpQkFBaUIsRUFBRSxDQUNsRyxDQUFDO0tBQ0g7SUFFRCwwQkFBMEIsQ0FBQyxRQUFRLEVBQUUsTUFBTSxDQUFDLENBQUM7SUFFN0MsUUFBUSxDQUFDLGlCQUFpQixDQUFDLEdBQUc7UUFDNUIsOENBQThDO1FBQzlDLGVBQWUsQ0FBQyxLQUFLLENBQUMsSUFBSSxFQUFFLFNBQVMsQ0FBQyxDQUFDO1FBQ3ZDLDRCQUE0QixDQUFDLElBQUksRUFBRSxNQUFNLENBQUMsQ0FBQztRQUMzQyxpRUFBaUU7UUFDakUsbUVBQW1FO1FBQ25FLDJEQUEyRDtRQUMzRCx3Q0FBd0M7UUFDeEMsUUFBUSxDQUFDLGlCQUFpQixDQUFDLEdBQUcsZUFBZSxDQUFDO0lBQ2hELENBQUMsQ0FBQztBQUNKLENBQUM7QUFFRCxNQUFNLFVBQVUsY0FBYyxDQUFJLFFBQVcsRUFBRSxpQkFBMkI7SUFDeEUsT0FBTyxDQUFJLE1BQXFCLEVBQUUsRUFBRTtRQUNsQyxNQUFNLE1BQU0sR0FBRyxTQUFTLENBQUksaUJBQWlCLENBQUMsQ0FBQztRQUUvQyw4REFBOEQ7UUFDOUQsOERBQThEO1FBQzlELElBQUksT0FBTyxpQkFBaUIsS0FBSyxRQUFRLEVBQUU7WUFDekMsa0NBQWtDLENBQUMsUUFBUSxFQUFFLGlCQUFpQixFQUFFLE1BQU0sQ0FBQyxDQUFDO1NBQ3pFO2FBQU07WUFDTCxXQUFXLElBQUksc0JBQXNCLENBQUMsUUFBUSxDQUFDLENBQUM7WUFDaEQsMEJBQTBCLENBQUMsUUFBUSxFQUFFLE1BQU0sQ0FBQyxDQUFDO1NBQzlDO1FBRUQsTUFBTSxRQUFRLEdBQW1CLFFBQWdCLENBQUMsTUFBTSxDQUFDLENBQUM7UUFDMUQsV0FBVyxJQUFJLCtCQUErQixDQUFDLFFBQVEsRUFBRSxRQUFRLENBQUMsQ0FBQztRQUVuRSxNQUFNLFNBQVMsR0FBRyxJQUFJLENBQUMsR0FBRyxFQUFFLENBQUM7UUFDN0IsSUFBSSxPQUFPLEdBQUcsSUFBSSxDQUFDO1FBQ25CLE9BQU8sTUFBTSxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUksUUFBUSxDQUFDLEVBQUUsR0FBRyxDQUFDO1lBQzdDLElBQUksRUFBRSxHQUFHLEVBQUU7Z0JBQ1QsT0FBTyxHQUFHLEtBQUssQ0FBQztZQUNsQixDQUFDO1lBQ0QsUUFBUSxFQUFFLEdBQUcsRUFBRTtnQkFDYixJQUFJLE9BQU8sRUFBRTtvQkFDWCxNQUFNLHdCQUF3QixHQUFHLE9BQU8sQ0FBQyxXQUFXLENBQ2xELGVBQWUsRUFDZCxRQUFnQixDQUFDLFdBQVcsQ0FBQyxTQUFTLENBQ3hDLENBQUM7b0JBQ0YsTUFBTSxPQUFPLEdBQUcsSUFBSSxDQUFDLEdBQUcsRUFBRSxDQUFDO29CQUMzQixPQUFPLENBQUMsR0FBRyxDQUNULDRDQUNFLHdCQUF3QixJQUFLLFFBQWdCLENBQUMsV0FBVyxDQUFDLElBQzVELGVBQWUsQ0FBQyxDQUFDLE9BQU8sR0FBRyxTQUFTLENBQUMsR0FBRyxJQUFJLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FDNUQsQ0FBQztpQkFDSDtZQUNILENBQUM7U0FDRixDQUFDLENBQUMsQ0FBQztJQUNOLENBQUMsQ0FBQztBQUNKLENBQUM7QUFFRCxTQUFTLHNCQUFzQixDQUFDLFFBQTJCO0lBQ3pELE1BQU0sU0FBUyxHQUFHLE1BQU0sQ0FBQyxjQUFjLENBQUMsUUFBUSxDQUFDLENBQUM7SUFDbEQsTUFBTSxnQkFBZ0IsR0FBRyxDQUFDLENBQUMsaUJBQWlCLElBQUksU0FBUyxDQUFDLENBQUM7SUFFM0QsSUFBSSxnQkFBZ0IsRUFBRTtRQUNwQixNQUFNLElBQUksS0FBSyxDQUNiLDhEQUE4RDtZQUM1RCw0RUFBNEUsQ0FDL0UsQ0FBQztLQUNIO0FBQ0gsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE9ic2VydmFibGUsIFN1YmplY3QsIHRhcCB9IGZyb20gJ3J4anMnO1xuaW1wb3J0IHsgdGFrZVVudGlsIH0gZnJvbSAncnhqcy9vcGVyYXRvcnMnO1xuXG5pbXBvcnQgeyBzZXR1cFN1YmplY3RVbnN1YnNjcmliZWRDaGVja2VyIH0gZnJvbSAnLi9jaGVja2VyJztcbmltcG9ydCB7XG4gIERFQ09SQVRPUl9BUFBMSUVELFxuICBnZXRTeW1ib2wsXG4gIGNyZWF0ZVN1YmplY3RPblRoZUluc3RhbmNlLFxuICBjb21wbGV0ZVN1YmplY3RPblRoZUluc3RhbmNlLFxufSBmcm9tICcuL2ludGVybmFscyc7XG5cbi8vIFRoaXMgd2lsbCBiZSBwcm92aWRlZCB0aHJvdWdoIFRlcnNlciBnbG9iYWwgZGVmaW5pdGlvbnMgYnkgQW5ndWxhciBDTEkuIFRoaXMgd2lsbFxuLy8gaGVscCB0byB0cmVlLXNoYWtlIGF3YXkgdGhlIGNvZGUgdW5uZWVkZWQgZm9yIHByb2R1Y3Rpb24gYnVuZGxlcy5cbmRlY2xhcmUgY29uc3QgbmdEZXZNb2RlOiBib29sZWFuO1xuXG5jb25zdCBOR19ERVZfTU9ERSA9IHR5cGVvZiBuZ0Rldk1vZGUgPT09ICd1bmRlZmluZWQnIHx8IG5nRGV2TW9kZTtcblxuZnVuY3Rpb24gb3ZlcnJpZGVOb25EaXJlY3RpdmVJbnN0YW5jZU1ldGhvZChcbiAgaW5zdGFuY2U6IGFueSxcbiAgZGVzdHJveU1ldGhvZE5hbWU6IHN0cmluZyxcbiAgc3ltYm9sOiBzeW1ib2xcbik6IHZvaWQge1xuICBjb25zdCBvcmlnaW5hbERlc3Ryb3kgPSBpbnN0YW5jZVtkZXN0cm95TWV0aG9kTmFtZV07XG5cbiAgaWYgKE5HX0RFVl9NT0RFICYmIHR5cGVvZiBvcmlnaW5hbERlc3Ryb3kgIT09ICdmdW5jdGlvbicpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgICBgJHtpbnN0YW5jZS5jb25zdHJ1Y3Rvci5uYW1lfSBpcyB1c2luZyB1bnRpbERlc3Ryb3llZCBidXQgZG9lc24ndCBpbXBsZW1lbnQgJHtkZXN0cm95TWV0aG9kTmFtZX1gXG4gICAgKTtcbiAgfVxuXG4gIGNyZWF0ZVN1YmplY3RPblRoZUluc3RhbmNlKGluc3RhbmNlLCBzeW1ib2wpO1xuXG4gIGluc3RhbmNlW2Rlc3Ryb3lNZXRob2ROYW1lXSA9IGZ1bmN0aW9uICgpIHtcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgcHJlZmVyLXJlc3QtcGFyYW1zXG4gICAgb3JpZ2luYWxEZXN0cm95LmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgY29tcGxldGVTdWJqZWN0T25UaGVJbnN0YW5jZSh0aGlzLCBzeW1ib2wpO1xuICAgIC8vIFdlIGhhdmUgdG8gcmUtYXNzaWduIHRoaXMgcHJvcGVydHkgYmFjayB0byB0aGUgb3JpZ2luYWwgdmFsdWUuXG4gICAgLy8gSWYgdGhlIGB1bnRpbERlc3Ryb3llZGAgb3BlcmF0b3IgaXMgY2FsbGVkIGZvciB0aGUgc2FtZSBpbnN0YW5jZVxuICAgIC8vIG11bHRpcGxlIHRpbWVzLCB0aGVuIHdlIHdpbGwgYmUgYWJsZSB0byBnZXQgdGhlIG9yaWdpbmFsXG4gICAgLy8gbWV0aG9kIGFnYWluIGFuZCBub3QgdGhlIHBhdGNoZWQgb25lLlxuICAgIGluc3RhbmNlW2Rlc3Ryb3lNZXRob2ROYW1lXSA9IG9yaWdpbmFsRGVzdHJveTtcbiAgfTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHVudGlsRGVzdHJveWVkPFQ+KGluc3RhbmNlOiBULCBkZXN0cm95TWV0aG9kTmFtZT86IGtleW9mIFQpIHtcbiAgcmV0dXJuIDxVPihzb3VyY2U6IE9ic2VydmFibGU8VT4pID0+IHtcbiAgICBjb25zdCBzeW1ib2wgPSBnZXRTeW1ib2w8VD4oZGVzdHJveU1ldGhvZE5hbWUpO1xuXG4gICAgLy8gSWYgYGRlc3Ryb3lNZXRob2ROYW1lYCBpcyBwYXNzZWQgdGhlbiB0aGUgZGV2ZWxvcGVyIGFwcGxpZXNcbiAgICAvLyB0aGlzIG9wZXJhdG9yIHRvIHNvbWV0aGluZyBub24tcmVsYXRlZCB0byBBbmd1bGFyIERJIHN5c3RlbVxuICAgIGlmICh0eXBlb2YgZGVzdHJveU1ldGhvZE5hbWUgPT09ICdzdHJpbmcnKSB7XG4gICAgICBvdmVycmlkZU5vbkRpcmVjdGl2ZUluc3RhbmNlTWV0aG9kKGluc3RhbmNlLCBkZXN0cm95TWV0aG9kTmFtZSwgc3ltYm9sKTtcbiAgICB9IGVsc2Uge1xuICAgICAgTkdfREVWX01PREUgJiYgZW5zdXJlQ2xhc3NJc0RlY29yYXRlZChpbnN0YW5jZSk7XG4gICAgICBjcmVhdGVTdWJqZWN0T25UaGVJbnN0YW5jZShpbnN0YW5jZSwgc3ltYm9sKTtcbiAgICB9XG5cbiAgICBjb25zdCBkZXN0cm95JDogU3ViamVjdDx2b2lkPiA9IChpbnN0YW5jZSBhcyBhbnkpW3N5bWJvbF07XG4gICAgTkdfREVWX01PREUgJiYgc2V0dXBTdWJqZWN0VW5zdWJzY3JpYmVkQ2hlY2tlcihpbnN0YW5jZSwgZGVzdHJveSQpO1xuXG4gICAgY29uc3Qgc3RhcnRUaW1lID0gRGF0ZS5ub3coKTtcbiAgICBsZXQgaXNFbXB0eSA9IHRydWU7XG4gICAgcmV0dXJuIHNvdXJjZS5waXBlKHRha2VVbnRpbDxVPihkZXN0cm95JCksIHRhcCh7XG4gICAgICBuZXh0OiAoKSA9PiB7XG4gICAgICAgIGlzRW1wdHkgPSBmYWxzZTtcbiAgICAgIH0sXG4gICAgICBjb21wbGV0ZTogKCkgPT4ge1xuICAgICAgICBpZiAoaXNFbXB0eSkge1xuICAgICAgICAgIGNvbnN0IGNvbnN0cnVjdG9yUHJvdG90eXBlTmFtZSA9IFJlZmxlY3QuZ2V0TWV0YWRhdGEoXG4gICAgICAgICAgICAnX19jbGFzc05hbWVfXycsXG4gICAgICAgICAgICAoaW5zdGFuY2UgYXMgYW55KS5jb25zdHJ1Y3Rvci5wcm90b3R5cGVcbiAgICAgICAgICApO1xuICAgICAgICAgIGNvbnN0IGVuZFRpbWUgPSBEYXRlLm5vdygpO1xuICAgICAgICAgIGNvbnNvbGUubG9nKFxuICAgICAgICAgICAgYFNvdXJjZSBvYnNlcnZhYmxlIGlzIEVtcHR5LiBDb25zdHJ1Y3RvcjogJHtcbiAgICAgICAgICAgICAgY29uc3RydWN0b3JQcm90b3R5cGVOYW1lID8/IChpbnN0YW5jZSBhcyBhbnkpLmNvbnN0cnVjdG9yLm5hbWVcbiAgICAgICAgICAgIH0uIFRpbWVzcGFuOiAkeygoZW5kVGltZSAtIHN0YXJ0VGltZSkgLyAxMDAwKS50b0ZpeGVkKDIpfXNgXG4gICAgICAgICAgKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0pKTtcbiAgfTtcbn1cblxuZnVuY3Rpb24gZW5zdXJlQ2xhc3NJc0RlY29yYXRlZChpbnN0YW5jZTogSW5zdGFuY2VUeXBlPGFueT4pOiBuZXZlciB8IHZvaWQge1xuICBjb25zdCBwcm90b3R5cGUgPSBPYmplY3QuZ2V0UHJvdG90eXBlT2YoaW5zdGFuY2UpO1xuICBjb25zdCBtaXNzaW5nRGVjb3JhdG9yID0gIShERUNPUkFUT1JfQVBQTElFRCBpbiBwcm90b3R5cGUpO1xuXG4gIGlmIChtaXNzaW5nRGVjb3JhdG9yKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgJ3VudGlsRGVzdHJveWVkIG9wZXJhdG9yIGNhbm5vdCBiZSB1c2VkIGluc2lkZSBkaXJlY3RpdmVzIG9yICcgK1xuICAgICAgICAnY29tcG9uZW50cyBvciBwcm92aWRlcnMgdGhhdCBhcmUgbm90IGRlY29yYXRlZCB3aXRoIFVudGlsRGVzdHJveSBkZWNvcmF0b3InXG4gICAgKTtcbiAgfVxufVxuIl19