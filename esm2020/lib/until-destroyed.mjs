import { catchError, isEmpty, of, share } from 'rxjs';
import { takeUntil } from 'rxjs/operators';
import { setupSubjectUnsubscribedChecker } from './checker';
import { DECORATOR_APPLIED, getSymbol, createSubjectOnTheInstance, completeSubjectOnTheInstance, } from './internals';
import 'reflect-metadata';
const NG_DEV_MODE = typeof ngDevMode === 'undefined' || ngDevMode;
function overrideNonDirectiveInstanceMethod(instance, destroyMethodName, symbol) {
    const originalDestroy = instance[destroyMethodName];
    if (NG_DEV_MODE && typeof originalDestroy !== 'function') {
        throw new Error(`${instance.constructor.name} is using untilDestroyed but doesn't implement ${destroyMethodName}`);
    }
    createSubjectOnTheInstance(instance, symbol);
    instance[destroyMethodName] = function () {
        // eslint-disable-next-line prefer-rest-params
        originalDestroy.apply(this, arguments);
        completeSubjectOnTheInstance(this, symbol);
        // We have to re-assign this property back to the original value.
        // If the `untilDestroyed` operator is called for the same instance
        // multiple times, then we will be able to get the original
        // method again and not the patched one.
        instance[destroyMethodName] = originalDestroy;
    };
}
export function untilDestroyed(instance, destroyMethodName) {
    return (source) => {
        const symbol = getSymbol(destroyMethodName);
        // If `destroyMethodName` is passed then the developer applies
        // this operator to something non-related to Angular DI system
        if (typeof destroyMethodName === 'string') {
            overrideNonDirectiveInstanceMethod(instance, destroyMethodName, symbol);
        }
        else {
            NG_DEV_MODE && ensureClassIsDecorated(instance);
            createSubjectOnTheInstance(instance, symbol);
        }
        const destroy$ = instance[symbol];
        NG_DEV_MODE && setupSubjectUnsubscribedChecker(instance, destroy$);
        const startTime = Date.now();
        const sharedObservable = source.pipe(takeUntil(destroy$), share());
        sharedObservable
            .pipe(isEmpty(), catchError(_ => of(false)))
            .subscribe(empty => {
            if (empty) {
                const constructorPrototypeName = Reflect.getMetadata('__className__', instance.constructor.prototype);
                const endTime = Date.now();
                console.log(`Source observable is Empty. Constructor: ${constructorPrototypeName ?? instance.constructor.name}. Timespan: ${((endTime - startTime) / 1000).toFixed(2)}s`);
            }
        });
        return sharedObservable;
    };
}
function ensureClassIsDecorated(instance) {
    const prototype = Object.getPrototypeOf(instance);
    const missingDecorator = !(DECORATOR_APPLIED in prototype);
    if (missingDecorator) {
        throw new Error('untilDestroyed operator cannot be used inside directives or ' +
            'components or providers that are not decorated with UntilDestroy decorator');
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidW50aWwtZGVzdHJveWVkLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vbGlicy91bnRpbC1kZXN0cm95L3NyYy9saWIvdW50aWwtZGVzdHJveWVkLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQUUsT0FBTyxFQUFjLEVBQUUsRUFBRSxLQUFLLEVBQVcsTUFBTSxNQUFNLENBQUM7QUFDM0UsT0FBTyxFQUFFLFNBQVMsRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBRTNDLE9BQU8sRUFBRSwrQkFBK0IsRUFBRSxNQUFNLFdBQVcsQ0FBQztBQUM1RCxPQUFPLEVBQ0wsaUJBQWlCLEVBQ2pCLFNBQVMsRUFDVCwwQkFBMEIsRUFDMUIsNEJBQTRCLEdBQzdCLE1BQU0sYUFBYSxDQUFDO0FBQ3JCLE9BQU8sa0JBQWtCLENBQUM7QUFNMUIsTUFBTSxXQUFXLEdBQUcsT0FBTyxTQUFTLEtBQUssV0FBVyxJQUFJLFNBQVMsQ0FBQztBQUVsRSxTQUFTLGtDQUFrQyxDQUN6QyxRQUFhLEVBQ2IsaUJBQXlCLEVBQ3pCLE1BQWM7SUFFZCxNQUFNLGVBQWUsR0FBRyxRQUFRLENBQUMsaUJBQWlCLENBQUMsQ0FBQztJQUVwRCxJQUFJLFdBQVcsSUFBSSxPQUFPLGVBQWUsS0FBSyxVQUFVLEVBQUU7UUFDeEQsTUFBTSxJQUFJLEtBQUssQ0FDYixHQUFHLFFBQVEsQ0FBQyxXQUFXLENBQUMsSUFBSSxrREFBa0QsaUJBQWlCLEVBQUUsQ0FDbEcsQ0FBQztLQUNIO0lBRUQsMEJBQTBCLENBQUMsUUFBUSxFQUFFLE1BQU0sQ0FBQyxDQUFDO0lBRTdDLFFBQVEsQ0FBQyxpQkFBaUIsQ0FBQyxHQUFHO1FBQzVCLDhDQUE4QztRQUM5QyxlQUFlLENBQUMsS0FBSyxDQUFDLElBQUksRUFBRSxTQUFTLENBQUMsQ0FBQztRQUN2Qyw0QkFBNEIsQ0FBQyxJQUFJLEVBQUUsTUFBTSxDQUFDLENBQUM7UUFDM0MsaUVBQWlFO1FBQ2pFLG1FQUFtRTtRQUNuRSwyREFBMkQ7UUFDM0Qsd0NBQXdDO1FBQ3hDLFFBQVEsQ0FBQyxpQkFBaUIsQ0FBQyxHQUFHLGVBQWUsQ0FBQztJQUNoRCxDQUFDLENBQUM7QUFDSixDQUFDO0FBRUQsTUFBTSxVQUFVLGNBQWMsQ0FBSSxRQUFXLEVBQUUsaUJBQTJCO0lBQ3hFLE9BQU8sQ0FBSSxNQUFxQixFQUFFLEVBQUU7UUFDbEMsTUFBTSxNQUFNLEdBQUcsU0FBUyxDQUFJLGlCQUFpQixDQUFDLENBQUM7UUFFL0MsOERBQThEO1FBQzlELDhEQUE4RDtRQUM5RCxJQUFJLE9BQU8saUJBQWlCLEtBQUssUUFBUSxFQUFFO1lBQ3pDLGtDQUFrQyxDQUFDLFFBQVEsRUFBRSxpQkFBaUIsRUFBRSxNQUFNLENBQUMsQ0FBQztTQUN6RTthQUFNO1lBQ0wsV0FBVyxJQUFJLHNCQUFzQixDQUFDLFFBQVEsQ0FBQyxDQUFDO1lBQ2hELDBCQUEwQixDQUFDLFFBQVEsRUFBRSxNQUFNLENBQUMsQ0FBQztTQUM5QztRQUVELE1BQU0sUUFBUSxHQUFtQixRQUFnQixDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBQzFELFdBQVcsSUFBSSwrQkFBK0IsQ0FBQyxRQUFRLEVBQUUsUUFBUSxDQUFDLENBQUM7UUFFbkUsTUFBTSxTQUFTLEdBQUcsSUFBSSxDQUFDLEdBQUcsRUFBRSxDQUFDO1FBQzdCLE1BQU0sZ0JBQWdCLEdBQUcsTUFBTSxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUksUUFBUSxDQUFDLEVBQUUsS0FBSyxFQUFFLENBQUMsQ0FBQztRQUN0RSxnQkFBZ0I7YUFDYixJQUFJLENBQ0gsT0FBTyxFQUFFLEVBQ1QsVUFBVSxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQzNCO2FBQ0EsU0FBUyxDQUFDLEtBQUssQ0FBQyxFQUFFO1lBQ2pCLElBQUksS0FBSyxFQUFFO2dCQUNULE1BQU0sd0JBQXdCLEdBQUcsT0FBTyxDQUFDLFdBQVcsQ0FDbEQsZUFBZSxFQUNkLFFBQWdCLENBQUMsV0FBVyxDQUFDLFNBQVMsQ0FDeEMsQ0FBQztnQkFDRixNQUFNLE9BQU8sR0FBRyxJQUFJLENBQUMsR0FBRyxFQUFFLENBQUM7Z0JBQzNCLE9BQU8sQ0FBQyxHQUFHLENBQ1QsNENBQ0Usd0JBQXdCLElBQUssUUFBZ0IsQ0FBQyxXQUFXLENBQUMsSUFDNUQsZUFBZSxDQUFDLENBQUMsT0FBTyxHQUFHLFNBQVMsQ0FBQyxHQUFHLElBQUksQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUM1RCxDQUFDO2FBQ0g7UUFDSCxDQUFDLENBQUMsQ0FBQztRQUVMLE9BQU8sZ0JBQWdCLENBQUM7SUFDMUIsQ0FBQyxDQUFDO0FBQ0osQ0FBQztBQUVELFNBQVMsc0JBQXNCLENBQUMsUUFBMkI7SUFDekQsTUFBTSxTQUFTLEdBQUcsTUFBTSxDQUFDLGNBQWMsQ0FBQyxRQUFRLENBQUMsQ0FBQztJQUNsRCxNQUFNLGdCQUFnQixHQUFHLENBQUMsQ0FBQyxpQkFBaUIsSUFBSSxTQUFTLENBQUMsQ0FBQztJQUUzRCxJQUFJLGdCQUFnQixFQUFFO1FBQ3BCLE1BQU0sSUFBSSxLQUFLLENBQ2IsOERBQThEO1lBQzVELDRFQUE0RSxDQUMvRSxDQUFDO0tBQ0g7QUFDSCxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgY2F0Y2hFcnJvciwgaXNFbXB0eSwgT2JzZXJ2YWJsZSwgb2YsIHNoYXJlLCBTdWJqZWN0IH0gZnJvbSAncnhqcyc7XG5pbXBvcnQgeyB0YWtlVW50aWwgfSBmcm9tICdyeGpzL29wZXJhdG9ycyc7XG5cbmltcG9ydCB7IHNldHVwU3ViamVjdFVuc3Vic2NyaWJlZENoZWNrZXIgfSBmcm9tICcuL2NoZWNrZXInO1xuaW1wb3J0IHtcbiAgREVDT1JBVE9SX0FQUExJRUQsXG4gIGdldFN5bWJvbCxcbiAgY3JlYXRlU3ViamVjdE9uVGhlSW5zdGFuY2UsXG4gIGNvbXBsZXRlU3ViamVjdE9uVGhlSW5zdGFuY2UsXG59IGZyb20gJy4vaW50ZXJuYWxzJztcbmltcG9ydCAncmVmbGVjdC1tZXRhZGF0YSc7XG5cbi8vIFRoaXMgd2lsbCBiZSBwcm92aWRlZCB0aHJvdWdoIFRlcnNlciBnbG9iYWwgZGVmaW5pdGlvbnMgYnkgQW5ndWxhciBDTEkuIFRoaXMgd2lsbFxuLy8gaGVscCB0byB0cmVlLXNoYWtlIGF3YXkgdGhlIGNvZGUgdW5uZWVkZWQgZm9yIHByb2R1Y3Rpb24gYnVuZGxlcy5cbmRlY2xhcmUgY29uc3QgbmdEZXZNb2RlOiBib29sZWFuO1xuXG5jb25zdCBOR19ERVZfTU9ERSA9IHR5cGVvZiBuZ0Rldk1vZGUgPT09ICd1bmRlZmluZWQnIHx8IG5nRGV2TW9kZTtcblxuZnVuY3Rpb24gb3ZlcnJpZGVOb25EaXJlY3RpdmVJbnN0YW5jZU1ldGhvZChcbiAgaW5zdGFuY2U6IGFueSxcbiAgZGVzdHJveU1ldGhvZE5hbWU6IHN0cmluZyxcbiAgc3ltYm9sOiBzeW1ib2xcbik6IHZvaWQge1xuICBjb25zdCBvcmlnaW5hbERlc3Ryb3kgPSBpbnN0YW5jZVtkZXN0cm95TWV0aG9kTmFtZV07XG5cbiAgaWYgKE5HX0RFVl9NT0RFICYmIHR5cGVvZiBvcmlnaW5hbERlc3Ryb3kgIT09ICdmdW5jdGlvbicpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgICBgJHtpbnN0YW5jZS5jb25zdHJ1Y3Rvci5uYW1lfSBpcyB1c2luZyB1bnRpbERlc3Ryb3llZCBidXQgZG9lc24ndCBpbXBsZW1lbnQgJHtkZXN0cm95TWV0aG9kTmFtZX1gXG4gICAgKTtcbiAgfVxuXG4gIGNyZWF0ZVN1YmplY3RPblRoZUluc3RhbmNlKGluc3RhbmNlLCBzeW1ib2wpO1xuXG4gIGluc3RhbmNlW2Rlc3Ryb3lNZXRob2ROYW1lXSA9IGZ1bmN0aW9uICgpIHtcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgcHJlZmVyLXJlc3QtcGFyYW1zXG4gICAgb3JpZ2luYWxEZXN0cm95LmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgY29tcGxldGVTdWJqZWN0T25UaGVJbnN0YW5jZSh0aGlzLCBzeW1ib2wpO1xuICAgIC8vIFdlIGhhdmUgdG8gcmUtYXNzaWduIHRoaXMgcHJvcGVydHkgYmFjayB0byB0aGUgb3JpZ2luYWwgdmFsdWUuXG4gICAgLy8gSWYgdGhlIGB1bnRpbERlc3Ryb3llZGAgb3BlcmF0b3IgaXMgY2FsbGVkIGZvciB0aGUgc2FtZSBpbnN0YW5jZVxuICAgIC8vIG11bHRpcGxlIHRpbWVzLCB0aGVuIHdlIHdpbGwgYmUgYWJsZSB0byBnZXQgdGhlIG9yaWdpbmFsXG4gICAgLy8gbWV0aG9kIGFnYWluIGFuZCBub3QgdGhlIHBhdGNoZWQgb25lLlxuICAgIGluc3RhbmNlW2Rlc3Ryb3lNZXRob2ROYW1lXSA9IG9yaWdpbmFsRGVzdHJveTtcbiAgfTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHVudGlsRGVzdHJveWVkPFQ+KGluc3RhbmNlOiBULCBkZXN0cm95TWV0aG9kTmFtZT86IGtleW9mIFQpIHtcbiAgcmV0dXJuIDxVPihzb3VyY2U6IE9ic2VydmFibGU8VT4pID0+IHtcbiAgICBjb25zdCBzeW1ib2wgPSBnZXRTeW1ib2w8VD4oZGVzdHJveU1ldGhvZE5hbWUpO1xuXG4gICAgLy8gSWYgYGRlc3Ryb3lNZXRob2ROYW1lYCBpcyBwYXNzZWQgdGhlbiB0aGUgZGV2ZWxvcGVyIGFwcGxpZXNcbiAgICAvLyB0aGlzIG9wZXJhdG9yIHRvIHNvbWV0aGluZyBub24tcmVsYXRlZCB0byBBbmd1bGFyIERJIHN5c3RlbVxuICAgIGlmICh0eXBlb2YgZGVzdHJveU1ldGhvZE5hbWUgPT09ICdzdHJpbmcnKSB7XG4gICAgICBvdmVycmlkZU5vbkRpcmVjdGl2ZUluc3RhbmNlTWV0aG9kKGluc3RhbmNlLCBkZXN0cm95TWV0aG9kTmFtZSwgc3ltYm9sKTtcbiAgICB9IGVsc2Uge1xuICAgICAgTkdfREVWX01PREUgJiYgZW5zdXJlQ2xhc3NJc0RlY29yYXRlZChpbnN0YW5jZSk7XG4gICAgICBjcmVhdGVTdWJqZWN0T25UaGVJbnN0YW5jZShpbnN0YW5jZSwgc3ltYm9sKTtcbiAgICB9XG5cbiAgICBjb25zdCBkZXN0cm95JDogU3ViamVjdDx2b2lkPiA9IChpbnN0YW5jZSBhcyBhbnkpW3N5bWJvbF07XG4gICAgTkdfREVWX01PREUgJiYgc2V0dXBTdWJqZWN0VW5zdWJzY3JpYmVkQ2hlY2tlcihpbnN0YW5jZSwgZGVzdHJveSQpO1xuXG4gICAgY29uc3Qgc3RhcnRUaW1lID0gRGF0ZS5ub3coKTtcbiAgICBjb25zdCBzaGFyZWRPYnNlcnZhYmxlID0gc291cmNlLnBpcGUodGFrZVVudGlsPFU+KGRlc3Ryb3kkKSwgc2hhcmUoKSk7XG4gICAgc2hhcmVkT2JzZXJ2YWJsZVxuICAgICAgLnBpcGUoXG4gICAgICAgIGlzRW1wdHkoKSxcbiAgICAgICAgY2F0Y2hFcnJvcihfID0+IG9mKGZhbHNlKSlcbiAgICAgIClcbiAgICAgIC5zdWJzY3JpYmUoZW1wdHkgPT4ge1xuICAgICAgICBpZiAoZW1wdHkpIHtcbiAgICAgICAgICBjb25zdCBjb25zdHJ1Y3RvclByb3RvdHlwZU5hbWUgPSBSZWZsZWN0LmdldE1ldGFkYXRhKFxuICAgICAgICAgICAgJ19fY2xhc3NOYW1lX18nLFxuICAgICAgICAgICAgKGluc3RhbmNlIGFzIGFueSkuY29uc3RydWN0b3IucHJvdG90eXBlXG4gICAgICAgICAgKTtcbiAgICAgICAgICBjb25zdCBlbmRUaW1lID0gRGF0ZS5ub3coKTtcbiAgICAgICAgICBjb25zb2xlLmxvZyhcbiAgICAgICAgICAgIGBTb3VyY2Ugb2JzZXJ2YWJsZSBpcyBFbXB0eS4gQ29uc3RydWN0b3I6ICR7XG4gICAgICAgICAgICAgIGNvbnN0cnVjdG9yUHJvdG90eXBlTmFtZSA/PyAoaW5zdGFuY2UgYXMgYW55KS5jb25zdHJ1Y3Rvci5uYW1lXG4gICAgICAgICAgICB9LiBUaW1lc3BhbjogJHsoKGVuZFRpbWUgLSBzdGFydFRpbWUpIC8gMTAwMCkudG9GaXhlZCgyKX1zYFxuICAgICAgICAgICk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuXG4gICAgcmV0dXJuIHNoYXJlZE9ic2VydmFibGU7XG4gIH07XG59XG5cbmZ1bmN0aW9uIGVuc3VyZUNsYXNzSXNEZWNvcmF0ZWQoaW5zdGFuY2U6IEluc3RhbmNlVHlwZTxhbnk+KTogbmV2ZXIgfCB2b2lkIHtcbiAgY29uc3QgcHJvdG90eXBlID0gT2JqZWN0LmdldFByb3RvdHlwZU9mKGluc3RhbmNlKTtcbiAgY29uc3QgbWlzc2luZ0RlY29yYXRvciA9ICEoREVDT1JBVE9SX0FQUExJRUQgaW4gcHJvdG90eXBlKTtcblxuICBpZiAobWlzc2luZ0RlY29yYXRvcikge1xuICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgICd1bnRpbERlc3Ryb3llZCBvcGVyYXRvciBjYW5ub3QgYmUgdXNlZCBpbnNpZGUgZGlyZWN0aXZlcyBvciAnICtcbiAgICAgICAgJ2NvbXBvbmVudHMgb3IgcHJvdmlkZXJzIHRoYXQgYXJlIG5vdCBkZWNvcmF0ZWQgd2l0aCBVbnRpbERlc3Ryb3kgZGVjb3JhdG9yJ1xuICAgICk7XG4gIH1cbn1cbiJdfQ==